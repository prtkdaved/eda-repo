---
- name: Create Security Zone in Apstra
  hosts: localhost
  gather_facts: no

  vars:
    vrf_cleaned_string: "{{ annotations['apstra.juniper.net/vrf'] | regex_replace('\\\\\"', '\"') }}"
    vrf_cleaned_comma_string: "{{ vrf_cleaned_string | regex_replace('\"([a-zA-Z_0-9]+)\": \"([^\"]+)\" \"([a-zA-Z_0-9]+)\":', '\"\\1\": \"\\2\", \"\\3\":') }}"

  tasks:
    - name: Convert cleaned VRF string to JSON
      set_fact:
        vrf_data: "{{ vrf_cleaned_comma_string | from_yaml }}"

    - name: Extract label directly using regex
      debug:
        msg: "{{ vrf_data }}"

    - name: Form the body combining sz_type
      set_fact:
        vrf_data_with_sztype: >-
          {{
            vrf_data
            | combine({'sz_type': (vrf_data.sz_type | default("evpn"))})
            | combine({'label': (vrf_data.label | default(vrf_data.vrfName))})
            | combine({'vrf_name': (vrf_data.vrfName | default(vrf_data.label))})
          }}

    - name: Print vrf_data_with_sztype
      debug:
        msg: "{{ vrf_data_with_sztype }}"

    - name: Extract blueprint with default and convert to string
      set_fact:
        bluprint_label_value: "{{ (vrf_data | json_query('blueprintName')) | default('') | string }}"

    - name: Extract tags from the annotations if present
      set_fact:
        sz_tags: "{{ vrf_data | json_query('tags') | default([]) }}"
      when: vrf_data is defined and vrf_data.tags is defined

    - name: Set sz_tags to default if tags are not present
      set_fact:
        sz_tags: ["k8s_ns={{ event.resource.metadata.name }}", "source=eda"]
      when: vrf_data is not defined or not vrf_data.tags

    - name: Connect to Apstra
      junipernetworks.apstra.authenticate:
        verify_certificates: false
        logout: false
      register: auth

    - block:
        - name: Get blueprint
          junipernetworks.apstra.blueprint:
            body:
              label: "{{ bluprint_label_value }}"
            auth_token: "{{ auth.token }}"
            lock_state: "ignore"
          register: bp
          until: bp is succeeded
          retries: 3
          delay: 5

        - name: Create tags if sz_tags is defined and is a list
          junipernetworks.apstra.tag:
            id: "{{ bp.id }}"
            body:
              label: "{{ tag }}"
              description: "test tag description"
            auth_token: "{{ auth.token }}"
          when: sz_tags | length > 0
          loop: "{{ sz_tags }}"
          loop_control:
            loop_var: tag

        - name: Create security_zone
          junipernetworks.apstra.security_zone:
            id: "{{ bp.id }}"
            body: "{{ vrf_data_with_sztype }}"
            auth_token: "{{ auth.token }}"
            tags: "{{ sz_tags if sz_tags | length > 0 else omit }}"
          register: sz
          async: 3600
          poll: 0

        - name: Print creation status
          debug:
            msg: "Security Zone {{ 'created' if sz.changed else 'not changed' }}"
          when: sz is succeeded

      rescue:
        - name: Unlock the blueprint as task failed
          junipernetworks.apstra.blueprint:
            id: "{{ bp.id }}"
            lock_state: "unlocked"
            state: committed
            auth_token: "{{ auth.token }}"
          register: blueprint_commit

        - name: Update the label of project as failed
          k8s:
            state: patched
            definition:
              apiVersion: v1
              kind: Namespace
              metadata:
                name: "{{ event.resource.metadata.name }}"
                labels:
                  apstraStatus: "failed"

        - name: Remove the label of project type
          k8s:
            state: patched
            definition:
              apiVersion: v1
              kind: Namespace
              metadata:
                name: "{{ event.resource.metadata.name }}"
                labels:
                  type: null

      always:
        - name: Unlock the blueprint
          junipernetworks.apstra.blueprint:
            id: "{{ bp.id }}"
            lock_state: "unlocked"
            state: committed
            auth_token: "{{ auth.token }}"
          register: blueprint_unlock

        - name: Commit the blueprint
          junipernetworks.apstra.blueprint:
            id: "{{ bp.id }}"
            lock_state: "ignore"
            state: committed
            auth_token: "{{ auth.token }}"
          register: blueprint_commit

        - name: Update the label of project as Success
          k8s:
            state: patched
            definition:
              apiVersion: v1
              kind: Namespace
              metadata:
                name: "{{ event.resource.metadata.name }}"
                labels:
                  apstraStatus: "Success"
          when: not sz.failed