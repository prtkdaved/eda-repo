---
- name: Convert cleaned VRF string to JSON
  set_fact:
    vrf_data: "{{ vrf_cleaned_comma_string | from_yaml }}"

- name: Extract label directly using regex
  debug:
    msg: "{{ vrf_data }}"

- name: Extract label with default and convert to string
  set_fact:
    label_value: "{{ (vrf_data | json_query('label')) | default('default-label') | string }}"

- name: Extract vrf_name with default and convert to string
  set_fact:
    vrf_name_value: "{{ (vrf_data | json_query('vrfName')) | default('default-vrf_name') | string }}"

- name: Extract blueprint with default and convert to string
  set_fact:
    bluprint_label_value: "{{ (vrf_data | json_query('blueprintName')) | string }}"

- name: Connect to Apstra
  junipernetworks.apstra.authenticate:
    verify_certificates: false
    logout: false
  register: auth

- name: Apstra Operations
  block:
    - name: Get blueprint
      junipernetworks.apstra.blueprint:
        body:
          label: "{{ bluprint_label_value }}"
        auth_token: "{{ auth.token }}"
        lock_state: "ignore"
      register: bp
      until: bp is succeeded
      retries: 3
      delay: 5

    - name: Get security_zone by label
      junipernetworks.apstra.security_zone:
        id: "{{ bp.id }}"
        body:
          label: "{{ label_value }}"
        auth_token: "{{ auth.token }}"
      register: sz
      until: sz is succeeded
      retries: 3
      delay: 5

    - name: Delete the security_zone
      junipernetworks.apstra.security_zone:
        id: "{{ sz.id }}"
        state: absent
        auth_token: "{{ auth.token }}"
      register: sz_delete
      async: 3600  # Set timeout for this operation to 1 hour
      poll: 0  # Do not poll for result immediately

  rescue:        
    - name: Unlock the blueprint as task failed
      junipernetworks.apstra.blueprint:
        id: "{{ bp.id }}"
        lock_state: "unlocked"
        state: committed
        auth_token: "{{ auth.token }}"
      register: blueprint_commit

  always:
    - name: Unlock the blueprint
      junipernetworks.apstra.blueprint:
        id: "{{ bp.id }}"
        lock_state: "unlocked"
        state: committed
        auth_token: "{{ auth.token }}"
      register: blueprint_unlock

    - name: Commit the blueprint
      junipernetworks.apstra.blueprint:
        id: "{{ bp.id }}"
        lock_state: "ignore"
        state: committed
        auth_token: "{{ auth.token }}"
      register: blueprint_commit
      tags:
        - commit