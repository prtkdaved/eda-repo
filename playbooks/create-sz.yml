---
- name: Gather Apstra facts
  hosts: localhost
  gather_facts: false 
  connection: local
  collections:
    - junipernetworks.apstra
    - community.general
  environment:
    APSTRA_API_URL: "https://10.87.2.40/api"
    APSTRA_USERNAME: "admin"
    APSTRA_PASSWORD: "Apstramarvis@123"
    APSTRA_VERIFY_CERTIFICATES: 0
  vars:
    namespace: "{{ ns }}"
    annotations: "{{ annotate }}"
    event: "{{ ev }}"
  tasks:
    - name: Fix escaped quotes and add missing commas for any number of parameters
      set_fact:
      # Step 1: Replace escaped quotes with normal quotes
        vrf_cleaned_string: "{{ annotations['apstra.juniper.net/vrf'] | regex_replace('\\\\\"', '\"') }}"
     
    - name: Add missing commas between key-value pairs
      set_fact:
      # Step 2: Ensure commas between key-value pairs by adding commas between consecutive strings if missing
        vrf_cleaned_comma_string: "{{ vrf_cleaned_string | regex_replace('\"([a-zA-Z_0-9]+)\": \"([^\"]+)\" \"([a-zA-Z_0-9]+)\":', '\"\\1\": \"\\2\", \"\\3\":') }}"

    - name: Convert cleaned VRF string to JSON
      set_fact:
      # Step 3: Convert the cleaned and correctly formatted string to a dictionary
        vrf_data: "{{ vrf_cleaned_comma_string[0] }}"

    - name: Extract label directly using regex
      debug:
        msg: "{{ vrf_data }}" 
        
    - name: Form the body combining sz_type
      ansible.builtin.set_fact:
        vrf_data_with_sztype: >-
          {{
            vrf_data
            | combine({'sz_type': (vrf_data.sz_type if vrf_data.sz_type is defined else "evpn" )})
            | combine({'label': (vrf_data.label if vrf_data.label is defined else vrf_data.vrfName)})
            | combine({'vrf_name': (vrf_data.vrfName if vrf_data.vrfName is defined else vrf_data.label)})
          }}

    - name: Print vrf_data_with_sztype
      debug:
        msg: "{{ vrf_data_with_sztype }}"

    - name: Extract blueprint with default and convert to string
      set_fact:
        bluprint_label_value: "{{ (annotations['apstra.juniper.net/vrf'] | regex_search('\"blueprintName\": \"([^\"]+)\"', '\\1') | first) | string }}"

    - name: Extract tags from the annotations if present
      set_fact:
        sz_tags: "{{ annotations['apstra.juniper.net/vrf'] | regex_search('\"tags\": \"([^\"]+)\"', '\\1') }}"
      when: annotations['apstra.juniper.net/vrf'] is defined and 'tags' in annotations['apstra.juniper.net/vrf']

    - name: Set sz_tags to None if tags are not present
      set_fact:
        sz_tags: ["k8s_ns={{ event.resource.metadata.name }}","source=eda", "cluster_name=ocpapstra-lab.englab.juniper.net"]
      when: annotations['apstra.juniper.net/vrf'] is not defined or 'tags' not in annotations['apstra.juniper.net/vrf']
        
    - name: Connect to Apstra
      junipernetworks.apstra.authenticate:
        verify_certificates: false
        logout: false
      register: auth
 
    - block:
        - name: Get blueprint
          junipernetworks.apstra.blueprint:
              body:
                label: "{{ bluprint_label_value }}"
              auth_token: "{{ auth.token }}"
          register: bp

        - name: Create tags if sz_tags is defined and is a list
          junipernetworks.apstra.tag:
            id: "{{ bp.id }}"
            body:
              label: "{{ tag }}"
              description: "test tag description"
            auth_token: "{{ auth.token }}"
          when: sz_tags is defined and sz_tags | length > 0
          loop: "{{ sz_tags }}"
          loop_control:
            loop_var: tag

        - name: Create security_zone
          junipernetworks.apstra.security_zone:
            id: "{{ bp.id }}"
            body: "{{ vrf_data_with_sztype }}"
            auth_token: "{{ auth.token }}"
            tags: "{{ sz_tags if sz_tags is not none else omit }}"
          register: sz

        - name: If changes are made, print changed
          debug:
            msg: "{{ sz.changed }}"
          when: sz.changed

        - name: If changes are not made, print not changed
          debug:
            msg: "{{ sz }}"
          when: not sz.changed

      rescue:
        - name: Unlock the bluprint as task is failed
          junipernetworks.apstra.blueprint:
            id: "{{ bp.id }}"
            lock_state: "unlocked"
            state: committed
            auth_token: "{{ auth.token }}"
          register: blueprint_commit

        - name: Update the label of project as failed
          k8s:
            state: patched
            definition:
              apiVersion: v1
              kind: Namespace
              metadata:
                name: "{{ event.resource.metadata.name }}"
                labels:
                  apstraStatus: "failed"

        - name: remove the label of project as failed
          k8s:
            state: patched
            definition:
              apiVersion: v1
              kind: Namespace
              metadata:
                name: "{{ event.resource.metadata.name }}"
                labels:
                  type: NULL
          
      
      always:
        - name: Unlock the  blueprint
          junipernetworks.apstra.blueprint:
            id: "{{ bp.id }}"
            lock_state: "unlocked"
            state: committed
            auth_token: "{{ auth.token }}"
          register: blueprint_unlock

        - name: Commit the blueprint
          junipernetworks.apstra.blueprint:
            id: "{{ bp.id }}"
            lock_state: "ignore"
            state: committed
            auth_token: "{{ auth.token }}"
          register: blueprint_commit

        - name: Update the label of project as Success
          k8s:
            state: patched
            definition:
              apiVersion: v1
              kind: Namespace
              metadata:
                name: "{{ event.resource.metadata.name }}"
                labels:
                  apstraStatus: "Success"
          when: not sz.failed