---
- name: Gather Apstra facts
  hosts: localhost
  gather_facts: false
  connection: local
  collections:
    - junipernetworks.apstra
    - community.general
  environment:
    APSTRA_API_URL: "https://10.87.2.40/api"
    APSTRA_USERNAME: "admin"
    APSTRA_PASSWORD: "Apstramarvis@123"
    APSTRA_VERIFY_CERTIFICATES: 0
  vars:
    namespace: "{{ ns }}"
    annotations: "{{ annotate }}"
    event: "{{ ev }}"
  tasks:
    - name: Fix escaped quotes and add missing commas for any number of parameters
      set_fact:
      # Step 1: Replace escaped quotes with normal quotes
        vrf_cleaned_string: "{{ annotations['apstra.juniper.net/vrf'] | regex_replace('\\\\\"', '\"') }}"
     
    - name: Add missing commas between key-value pairs
      set_fact:
      # Step 2: Ensure commas between key-value pairs by adding commas between consecutive strings if missing
        vrf_cleaned_comma_string: "{{ vrf_cleaned_string | regex_replace('\"([a-zA-Z_0-9]+)\": \"([^\"]+)\" \"([a-zA-Z_0-9]+)\":', '\"\\1\": \"\\2\", \"\\3\":') }}"

    - name: Convert cleaned VRF string to JSON
      set_fact:
      # Step 3: Convert the cleaned and correctly formatted string to a dictionary
        vrf_data: "{{ vrf_cleaned_comma_string[0] }}"

    - name: Extract label directly using regex
      debug:
        msg: "{{ vrf_data }}" 

    - name: Print vrf specifics to the namespace
      debug:
        msg: "{{ annotations['apstra.juniper.net/vrf'] | regex_search('\"label\": \"([^\"]+)\"', '\\1') }}"
    
    - name: Extract label with default and convert to string
      set_fact:
        label_value: "{{ (annotations['apstra.juniper.net/vrf'] | regex_search('\"vrfName\": \"([^\"]+)\"', '\\1') | first) | default('default-label') | string }}"

    - name: Extract vrf_name with default and convert to string
      set_fact:
        vrf_name_value: "{{ (annotations['apstra.juniper.net/vrf'] | regex_search('\"vrfName\": \"([^\"]+)\"', '\\1') | first) | default('default-vrf_name') | string }}"

    - name: Extract blueprint with default and convert to string
      set_fact:
        bluprint_label_value: "{{ (annotations['apstra.juniper.net/vrf'] | regex_search('\"blueprintName\": \"([^\"]+)\"', '\\1') | first) | string }}"

    - name: Connect to Apstra
      junipernetworks.apstra.authenticate:
        verify_certificates: false
        logout: false
      register: auth

    - block:
        - name: Get blueprint
          junipernetworks.apstra.blueprint:
            body:
              label: "{{ bluprint_label_value }}"
            auth_token: "{{ auth.token }}"
          register: bp

        - name: Get security_zone by label
          junipernetworks.apstra.security_zone:
            id: "{{ bp.id }}"
            body:
              label: "{{ label_value }}"
            auth_token: "{{ auth.token }}"
          register: sz

        - name: Delete the security_zone
          junipernetworks.apstra.security_zone:
            id: "{{ sz.id }}"
            state: absent
            auth_token: "{{ auth.token }}"
          register: sz_delete

      rescue:        
        - name: Unlock the bluprint as task is failed
          junipernetworks.apstra.blueprint:
            id: "{{ bp.id }}"
            lock_state: "unlocked"
            state: committed
            auth_token: "{{ auth.token }}"
          register: blueprint_commit

      always:
        - name: Unlock the  blueprint
          junipernetworks.apstra.blueprint:
            id: "{{ bp.id }}"
            lock_state: "unlocked"
            state: committed
            auth_token: "{{ auth.token }}"
          register: blueprint_unlock

        - name: Commit the blueprint
          junipernetworks.apstra.blueprint:
            id: "{{ bp.id }}"
            lock_state: "ignore"
            state: committed
            auth_token: "{{ auth.token }}"
          register: blueprint_commit

